name: Application Pipeline; build, test and deploy the greetings application
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
    - hello-world/**
  pull_request:
    branches: [main]
    paths:
    - hello-world/**

defaults:
  run:
    working-directory: ./hello-world

jobs:
  compile-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.14
      uses: actions/setup-java@v1
      with:
        java-version: 1.14
    - name: Build jar with Maven
      run: mvn clean install
    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: target
    - name: create some delay for uploading the artifact
      run: sleep 30

  build-and-push-image:
    needs: compile-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@master
      with:
        name: my-artifact
        path: target
    - name: Build Container Image
      run: docker build --tag ghcr.io/lukonjun/hello-world:${{ github.sha }} .
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Run docker push
      run: docker push ghcr.io/lukonjun/metrics-collector:${{ github.run_id }}

  deploy-infrastructure:
    # From https://learn.hashicorp.com/tutorials/terraform/github-actions
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # terraform_version: 0.13.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    - name: Terraform Init
      id: init
      run: terraform init
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
  
